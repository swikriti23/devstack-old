#!/usr/bin/env bash

# **exercise.sh** - using the cloud can be fun

# we will use the ``nova`` cli tool provided by the ``python-novaclient``
# package
#


# This script exits on an error so that errors don't compound and you see
# only the first error that occured.
set -o errexit

# Print the commands being run so that we can see the command that triggers
# an error.  It is also useful for following allowing as the install occurs.
set -o xtrace


load_settings()
{
    # Settings
    # ========
    
    # Use openrc + stackrc + localrc for settings
    pushd $(cd $(dirname "$0")/.. && pwd)
    source ./openrc
    popd
    
    # Set some defaults
    
    DEFAULT_FLOATING_POOL=${DEFAULT_FLOATING_POOL:-nova}
    TEST_FLOATING_POOL=${TEST_FLOATING_POOL:-test}
}

load_user_token()
{
    # Get a token for clients that don't support service catalog
    # ==========================================================
    
    # manually create a token by querying keystone (sending JSON data).  Keystone
    # returns a token and catalog of endpoints.  We use python to parse the token
    # and save it.
    
    TOKEN=`curl -s -d  "{\"auth\":{\"passwordCredentials\": {\"username\": \"$OS_USERNAME\", \"password\": \"$OS_PASSWORD\"}}}" -H "Content-type: application/json" ${OS_AUTH_URL%/}/tokens | python -c "import sys; import json; tok = json.loads(sys.stdin.read()); print tok['access']['token']['id'];"`
}

load_admin_token()
{
    OS_USERNAME=admin
    load_user_token
}

launch_server()
{
    # Launching a server
    # ==================
    
    # List servers for tenant:
    nova list
    
    # Images
    # ------
    
    # Nova has a **deprecated** way of listing images.
    nova image-list
    
    # But we recommend using glance directly
    glance -A $TOKEN index
    
    # Let's grab the id of the first AMI image to launch
    IMAGE=`glance -A $TOKEN index | egrep ami | cut -d" " -f1`
    
    # Security Groups
    # ---------------
    SECGROUP=test_secgroup
    
    # List of secgroups:
    nova secgroup-list
    
    # Create a secgroup
    nova secgroup-create $SECGROUP "test_secgroup description"
    
    # determine flavor
    # ----------------
    
    # List of flavors:
    nova flavor-list
    
    DEFAULT_INSTANCE_TYPE=${DEFAULT_INSTANCE_TYPE:-m1.tiny}
    INSTANCE_TYPE=`nova flavor-list | grep $DEFAULT_INSTANCE_TYPE | cut -d"|" -f2`
    if [[ -z "$INSTANCE_TYPE" ]]; then
        # grab the first flavor in the list to launch if default doesn't exist
       INSTANCE_TYPE=`nova flavor-list | head -n 4 | tail -n 1 | cut -d"|" -f2`
    fi
    
    NAME="myserver"
    
    nova boot --flavor $INSTANCE_TYPE --image $IMAGE $NAME --security_groups=$SECGROUP
    
    _check_server
}

_check_server()
{
    # Testing
    # =======
    
    # First check if it spins up (becomes active and responds to ping on
    # internal ip).  If you run this script from a nova node, you should
    # bypass security groups and have direct access to the server.
    
    # Waiting for boot
    # ----------------
    
    # Max time to wait while vm goes from build to active state
    ACTIVE_TIMEOUT=${ACTIVE_TIMEOUT:-10}
    
    # Max time till the vm is bootable
    BOOT_TIMEOUT=${BOOT_TIMEOUT:-15}
    
    # Max time to wait for proper association and dis-association.
    ASSOCIATE_TIMEOUT=${ASSOCIATE_TIMEOUT:-10}
    
    # check that the status is active within ACTIVE_TIMEOUT seconds
    if ! timeout $ACTIVE_TIMEOUT sh -c "while ! nova show $NAME | grep status | grep -q ACTIVE; do sleep 1; done"; then
        echo "server didn't become active!"
        exit 1
    fi
    
    # get the IP of the server
    IP=`nova show $NAME | grep "private network" | cut -d"|" -f3`
    
    # for single node deployments, we can ping private ips
    MULTI_HOST=${MULTI_HOST:-0}
    if [ "$MULTI_HOST" = "0" ]; then
        # sometimes the first ping fails (10 seconds isn't enough time for the VM's
        # network to respond?), so let's ping for a default of 15 seconds with a
        # timeout of a second for each ping.
        if ! timeout $BOOT_TIMEOUT sh -c "while ! ping -c1 -w1 $IP; do sleep 1; done"; then
            echo "Couldn't ping server"
            exit 1
        fi
    else
        # On a multi-host system, without vm net access, do a sleep to wait for the boot
        sleep $BOOT_TIMEOUT
    fi
}

shutdown_server()
{
    # shutdown the server
    nova delete $NAME

    # FIXME: validate shutdown within 5 seconds
    # (nova show $NAME returns 1 or status != ACTIVE)?
}

#
# Do inital actions
#
load_settings
